// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package MimcCombined

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MimcCombinedMetaData contains all meta data concerning the MimcCombined contract.
var MimcCombinedMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"ProofVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"VerificationFailed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"public_inputs\",\"type\":\"uint256[]\"}],\"name\":\"Verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"uint256ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b506132a98061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80637e4f7a8a1461004e5780637ecebe001461007e5780639099df1b146100ae578063ce7e51e3146100b8575b5f80fd5b61006860048036038101906100639190612abe565b6100e8565b6040516100759190612b56565b60405180910390f35b61009860048036038101906100939190612bc9565b612795565b6040516100a59190612c7e565b60405180910390f35b6100b661282f565b005b6100d260048036038101906100cd9190612cd1565b6128a7565b6040516100df9190612c7e565b60405180910390f35b5f805f90505f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805461013590612d29565b80601f016020809104026020016040519081016040528092919081815260200182805461016190612d29565b80156101ac5780601f10610183576101008083540402835291602001916101ac565b820191905f5260205f20905b81548152906001019060200180831161018f57829003601f168201915b505050505090505f8190505f8151036101fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f190612da3565b60405180910390fd5b7f3000000000000000000000000000000000000000000000000000000000000000816001835161022a9190612dee565b8151811061023b5761023a612e21565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146102a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029f90612da3565b60405180910390fd5b60405161022081016102b987610659565b6102c3888861066d565b6102cc896106c6565b6102d58a6106e2565b5f6102e189898d6108b8565b90506102ec81610ba8565b90506102f8818c610c0f565b9050610304818c610c8a565b60608301517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010361035b85612000856125c6565b08806101a086015261036e848b8d610cf8565b8061018087015261037d611057565b6103868e6120f7565b61038f8e612081565b6103988e611c7c565b6103a18e6117d9565b6103aa8e61157c565b6103b38e6111ab565b6101e08601519850612630565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f77726f6e67206e756d626572206f66207075626c696320696e707574730000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6572726f72206563206f7065726174696f6e00000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e707574732061726520626967676572207468616e207200000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f77726f6e672070726f6f662073697a65000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f70656e696e677320626967676572207468616e2072000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6572726f722076657269667900000000000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6572726f722072616e646f6d2067656e206b7a670000000000000000000000006044820152606481fd5b6004811461066a576106696103c0565b5b50565b60015f5b828110156106b2577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184351082169150602084019350600181019050610671565b50806106c1576106c061047e565b5b505050565b60605f02610340018082146106de576106dd6104dd565b5b5050565b60016102a082017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610280830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610180830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101a0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101c0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101e0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610200830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610260830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610340830190505f5b5f8110156108a4577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182351083169250602082019150600181019050610863565b50816108b3576108b261053c565b5b505050565b5f60405161022081016467616d6d6181527f213e2a484870b107d04f891d8e972d5c9b198f38849e4a2d54951a76dace30c760208201527f1a3e5256261e97d6ad55e3fddbbe6c50eff4eeaa7187352670d1b2046915ff2a60408201527f2ff165270c36926c8da140fdf3562a037796371526999197fa8dbc4422d3b53360608201527f15ccda9c90b87f6134c83e2cb34212e2f96bf192b2e488d612f35efe098bcda360808201527f0ae1887b1cd3a0d82fef9b15f1c7bc415acbf099885def08ff5e27c7cb5017b460a08201527f210a4d7eba021e2d5bcb8011111f330ffc4863bcff16383d2e4d395ceb3282ea60c08201527f19413225fa5e295bfc3c45393ba24ace882c59e5c54a6756642f3c3829ae707660e08201527f21e17e96dbc9fae88b987ddc901d0349bc1474c532d5ff9cb7da770f59a51a756101008201527f0f73b01eadae9e79e4e84e25806b8766fb227e6aaf5a02caee674cac4ebb808e6101208201527f19a7d92f3d040833d92d563c807918cb3e2d2d3d0ac6403954acfc40886041fd6101408201527f0186748960407a234fdf2db1a6b771350f3fa29edea44544d89f7bbc61c241c36101608201527f2c29e06481855174e6068fa11f5aea3b17af293ca832f57d5082749a739242976101808201527f0a28731332a13f9cad0436932e5dd4daee2e554343bf3febbafb44705b7562406101a08201527f11faa8b82f05b815770601ee17c8ea1f0d05b09a131a2b4c5ac730fa579eccdb6101c08201527f08d86a798e0084f60ad137ca8d89fb72ad8a772ea91b755662043979b5c45dbe6101e08201527f08e2d5eeece1284108887a5dfd9de6331f93e48d031d0bb6155b3bc40b76b2dd61020082015261022081016020860280888337808201915060c0808784378083019250816102c50160208582601b880160025afa80610b6e57610b6d61059b565b5b855197507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188066040880152505050505050509392505050565b5f60405161022060405101636265746181528360208201526020816024601c840160025afa80610bdb57610bda61059b565b5b815193507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184066020840152505050919050565b5f60405161022060405101606564616c70686182526020820186815260208101905060406102208701823760208383601b860160025afa80610c5457610c5361059b565b5b835195507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186065f860152505050505092915050565b60405161022060405101637a657461815283602082015260c0808401604083013760208160e4601c840160025afa80610cc657610cc561059b565b5b81517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181066060850152505050505050565b5f60405160608101516101a082015186610d1481888486610d91565b5f805b88811015610d84577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001883584510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018288089650602083019250602088019750600181019050610d17565b5050505050509392505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f3062cb506d9a969cb702833453cd4c52654aa6a93775a2c5bf57d6844360800183096001855f5b86811015610e80577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103860882527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017e6fab49b869ae62001deac878b2667bd31bf3e28e3a2d764aa49b8d9bbdd31084099250602082019150600181019050610dda565b50610e8c818789610f47565b869050600191505f5b86811015610f3d577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001868551090982526020820191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017e6fab49b869ae62001deac878b2667bd31bf3e28e3a2d764aa49b8d9bbdd31084099250600181019050610e95565b5050505050505050565b600183525f805b83811015610f9c5781850151828401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818309905060208401935080848801525050600181019050610f4e565b5060208103820191508084019350610fdc6020850160027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010386516125c6565b5f5b8481101561104f5760208603955083517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001875184098086527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182850993506020860395505050600181019050610fde565b505050505050565b604051610220604051016101a08201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036060850151086110e08360027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103836125c6565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f3062cb506d9a969cb702833453cd4c52654aa6a93775a2c5bf57d68443608001820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820991505f8401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992508260808601525050505050565b6040516102208101610140820151815261016082015160208201526102c083013560408201526102e08301356060820152610220830135608082015261024083013560a082015261030083013560c082015261032083013560e082015260608201516101008201526101c08201516101208201526020816101408360025afa80611238576112376105fa565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018251069050816040810192506102c085013581526102e08501356020820152611288838361030088018461251e565b610140840161129d848461022089018461251e565b61012085016112b184610260890183612574565b8460408101955060018152600260208201528151604082015260408160608360075afa806112e2576112e161059b565b5b6020820180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47038152611318888487886123d6565b876040890198506113338960608c01516102c08e0184612491565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017e6fab49b869ae62001deac878b2667bd31bf3e28e3a2d764aa49b8d9bbdd31060608c0151097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818a0998506113b08a8a6103008f018561251e565b6113bc8a83898a6123d6565b6020880180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703815287518b52602088015160208c01527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260408c01527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60608c01527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808c01527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a08c0152885160c08c0152602089015160e08c01527f06aa62212f24bf24ba161b221e4a52762912cc763a94ad3c960e58d1cb38df556101008c01527f0e5b98b843eafb29a6e6b260fc546da62bf5d8315b634fc0ab6121328fcd31666101208c01527f165102083cc2c1f72fabe5fa146dbc4e508a340703a7d8ceec77107320a4bc5e6101408c01527f0d3d23e9edc29c8564d57befaacc026fc12f701d537ca1d008dfb9c8c5f46b606101608c01526115428b611551565b50505050505050505050505050565b60405160205f6101808460085afa5f516101e083015180838316169150816101e08501525050505050565b6040516102206040510160208101604082016101c084015180610140860160a087015161014088015260c08701516101608801526102808801356101208801526115cb868360e08a01846124c8565b6115de826102a08a016101208a01612574565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838309915061161686835f8b016101408b0161251e565b611629826101808a016101208a01612574565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838309915061165e868360408b018461251e565b611671826101a08a016101208a01612574565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991506116a6868360808b018461251e565b6116b9826101c08a016101208a01612574565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991507f213e2a484870b107d04f891d8e972d5c9b198f38849e4a2d54951a76dace30c786527f1a3e5256261e97d6ad55e3fddbbe6c50eff4eeaa7187352670d1b2046915ff2a8552611731848388846124c8565b611744826101e08a016101208a01612574565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991507f2ff165270c36926c8da140fdf3562a037796371526999197fa8dbc4422d3b53386527f15ccda9c90b87f6134c83e2cb34212e2f96bf192b2e488d612f35efe098bcda385526117bc848388846124c8565b6117cf826102008a016101208a01612574565b5050505050505050565b604051610220604051016467616d6d6181526060820151602082015260a0820151604082015260c0820151606082015260e0820151608082015261010082015160a082015260c05f840160c08301377f213e2a484870b107d04f891d8e972d5c9b198f38849e4a2d54951a76dace30c76101808201527f1a3e5256261e97d6ad55e3fddbbe6c50eff4eeaa7187352670d1b2046915ff2a6101a08201527f2ff165270c36926c8da140fdf3562a037796371526999197fa8dbc4422d3b5336101c08201527f15ccda9c90b87f6134c83e2cb34212e2f96bf192b2e488d612f35efe098bcda36101e0820152610200610280840135818301526102a084013560208201830152610180840135604082018301526101a0840135606082018301526101c0840135608082018301526101e084013560a0820183015261020084013560c0820183015260e0810182016102608501358152601b60035f0260170160208102600501905060206101c087018284880160025afa8061195c5761195b61059b565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c0880151066101c08801525050505050505050565b604051610220604051017f19413225fa5e295bfc3c45393ba24ace882c59e5c54a6756642f3c3829ae707681527f21e17e96dbc9fae88b987ddc901d0349bc1474c532d5ff9cb7da770f59a51a7560208201526119fe604082016101808501358360e0860161245a565b7f0f73b01eadae9e79e4e84e25806b8766fb227e6aaf5a02caee674cac4ebb808e81527f19a7d92f3d040833d92d563c807918cb3e2d2d3d0ac6403954acfc40886041fd6020820152611a5e604082016101a08501358360e086016124c8565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0840135610180850135097f0186748960407a234fdf2db1a6b771350f3fa29edea44544d89f7bbc61c241c382527f2c29e06481855174e6068fa11f5aea3b17af293ca832f57d5082749a739242976020830152611ae760408301828460e087016124c8565b7f0a28731332a13f9cad0436932e5dd4daee2e554343bf3febbafb44705b75624082527f11faa8b82f05b815770601ee17c8ea1f0d05b09a131a2b4c5ac730fa579eccdb6020830152611b47604083016101c08601358460e087016124c8565b7f08d86a798e0084f60ad137ca8d89fb72ad8a772ea91b755662043979b5c45dbe82527f08e2d5eeece1284108887a5dfd9de6331f93e48d031d0bb6155b3bc40b76b2dd6020830152611ba5604083018360e0860160e087016123d6565b610340840161034085015f5b5f811015611bf1578135855260208201356020860152611bda6040860184358760e08a016124c8565b602083019250604082019150600181019050611bb1565b507f0ae1887b1cd3a0d82fef9b15f1c7bc415acbf099885def08ff5e27c7cb5017b484527f210a4d7eba021e2d5bcb8011111f330ffc4863bcff16383d2e4d395ceb3282ea6020850152611c4d60408501888660e089016124c8565b61022086013584526102408601356020850152611c7260408501898660e089016124c8565b5050505050505050565b6040516020810151604082015160608301515f8401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184610260880135097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e088013586097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180890135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161020089013587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08a0135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600580097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878a097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808d0135820895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189870895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016005820994507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08d0135860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820993507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08d0135850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018582099050807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010390507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160808d01518208905061207281858f611994565b50505050505050505050505050565b604051600261200001610220604051016120a0818360608601516125c6565b6120b38282610140880160a08801612491565b6120c982610100870160a0870160a08801612418565b6120db828260a0870160a0880161245a565b6120f08260c0870160a0870160a08801612418565b5050505050565b604051610220604051017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208301516101e08501350981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604083015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808401358251088152602081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208401516102008601350981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604084015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08501358251088152604082017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408501516101c08701350881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001825184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001815184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000015f85015184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102608601358451098352606083017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808601516102a08801350881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001845182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160808601517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010382510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a086015161028088013509835282518151146101e0860152505050505050565b6040518251855260208301516020860152835160408601526020840151606086015260408260808760065afa806124105761240f61041f565b5b505050505050565b6040518251855260208301516020860152833560408601526020840135606086015260408260808760065afa806124525761245161041f565b5b505050505050565b604051825185526020830151602086015283604086015260408260608760075afa806124895761248861041f565b5b505050505050565b604051823585526020830135602086015283604086015260408260608760075afa806124c0576124bf61041f565b5b505050505050565b604051825185526020830151602086015283604086015260408560608760075afa825160408701526020830151606087015260408360808860065afa81169050806125165761251561041f565b5b505050505050565b604051823585526020830135602086015283604086015260408560608760075afa825160408701526020830151606087015260408360808860065afa811690508061256c5761256b61041f565b5b505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838335097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181835108825250505050565b5f60208452602080850152602060408501528160608501528260808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a085015260208460c08660055afa5f81036126245761262361059b565b5b84519150509392505050565b50505050505082612689573373ffffffffffffffffffffffffffffffffffffffff167f4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf60405160405180910390a25f935050505061278d565b7f310000000000000000000000000000000000000000000000000000000000000081600183516126b99190612dee565b815181106126ca576126c9612e21565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350805f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090816127419190613018565b503373ffffffffffffffffffffffffffffffffffffffff167f9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd60405160405180910390a2600193505050505b949350505050565b5f602052805f5260405f205f9150905080546127b090612d29565b80601f01602080910402602001604051908101604052809291908181526020018280546127dc90612d29565b80156128275780601f106127fe57610100808354040283529160200191612827565b820191905f5260205f20905b81548152906001019060200180831161280a57829003601f168201915b505050505081565b5f612839446128a7565b6040516020016128499190613147565b6040516020818303038152906040529050805f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090816128a39190613018565b5050565b60605f82036128ed576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506129fb565b5f8290505f5b5f821461291c5780806129059061316c565b915050600a8261291591906131e0565b91506128f3565b5f8167ffffffffffffffff81111561293757612936612e4e565b5b6040519080825280601f01601f1916602001820160405280156129695781602001600182028036833780820191505090505b5090505b5f85146129f4576001826129819190612dee565b9150600a856129909190613210565b603061299c9190613240565b60f81b8183815181106129b2576129b1612e21565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a856129ed91906131e0565b945061296d565b8093505050505b919050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112612a2957612a28612a08565b5b8235905067ffffffffffffffff811115612a4657612a45612a0c565b5b602083019150836001820283011115612a6257612a61612a10565b5b9250929050565b5f8083601f840112612a7e57612a7d612a08565b5b8235905067ffffffffffffffff811115612a9b57612a9a612a0c565b5b602083019150836020820283011115612ab757612ab6612a10565b5b9250929050565b5f805f8060408587031215612ad657612ad5612a00565b5b5f85013567ffffffffffffffff811115612af357612af2612a04565b5b612aff87828801612a14565b9450945050602085013567ffffffffffffffff811115612b2257612b21612a04565b5b612b2e87828801612a69565b925092505092959194509250565b5f8115159050919050565b612b5081612b3c565b82525050565b5f602082019050612b695f830184612b47565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612b9882612b6f565b9050919050565b612ba881612b8e565b8114612bb2575f80fd5b50565b5f81359050612bc381612b9f565b92915050565b5f60208284031215612bde57612bdd612a00565b5b5f612beb84828501612bb5565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612c2b578082015181840152602081019050612c10565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612c5082612bf4565b612c5a8185612bfe565b9350612c6a818560208601612c0e565b612c7381612c36565b840191505092915050565b5f6020820190508181035f830152612c968184612c46565b905092915050565b5f819050919050565b612cb081612c9e565b8114612cba575f80fd5b50565b5f81359050612ccb81612ca7565b92915050565b5f60208284031215612ce657612ce5612a00565b5b5f612cf384828501612cbd565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612d4057607f821691505b602082108103612d5357612d52612cfc565b5b50919050565b7f76657269666965722d696e76616c69642d6e6f6e6365000000000000000000005f82015250565b5f612d8d601683612bfe565b9150612d9882612d59565b602082019050919050565b5f6020820190508181035f830152612dba81612d81565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612df882612c9e565b9150612e0383612c9e565b9250828203905081811115612e1b57612e1a612dc1565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612ed77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e9c565b612ee18683612e9c565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612f1c612f17612f1284612c9e565b612ef9565b612c9e565b9050919050565b5f819050919050565b612f3583612f02565b612f49612f4182612f23565b848454612ea8565b825550505050565b5f90565b612f5d612f51565b612f68818484612f2c565b505050565b5b81811015612f8b57612f805f82612f55565b600181019050612f6e565b5050565b601f821115612fd057612fa181612e7b565b612faa84612e8d565b81016020851015612fb9578190505b612fcd612fc585612e8d565b830182612f6d565b50505b505050565b5f82821c905092915050565b5f612ff05f1984600802612fd5565b1980831691505092915050565b5f6130088383612fe1565b9150826002028217905092915050565b61302182612bf4565b67ffffffffffffffff81111561303a57613039612e4e565b5b6130448254612d29565b61304f828285612f8f565b5f60209050601f831160018114613080575f841561306e578287015190505b6130788582612ffd565b8655506130df565b601f19841661308e86612e7b565b5f5b828110156130b557848901518255600182019150602085019450602081019050613090565b868310156130d257848901516130ce601f891682612fe1565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f6130fb82612bf4565b61310581856130e7565b9350613115818560208601612c0e565b80840191505092915050565b7f3000000000000000000000000000000000000000000000000000000000000000815250565b5f61315282846130f1565b915061315d82613121565b60018201915081905092915050565b5f61317682612c9e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131a8576131a7612dc1565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6131ea82612c9e565b91506131f583612c9e565b925082613205576132046131b3565b5b828204905092915050565b5f61321a82612c9e565b915061322583612c9e565b925082613235576132346131b3565b5b828206905092915050565b5f61324a82612c9e565b915061325583612c9e565b925082820190508082111561326d5761326c612dc1565b5b9291505056fea2646970667358221220f8d01c19c452abdd34a53f25f2c9e5252b634c2e737afa6312002880333f557c64736f6c63430008140033",
}

// MimcCombinedABI is the input ABI used to generate the binding from.
// Deprecated: Use MimcCombinedMetaData.ABI instead.
var MimcCombinedABI = MimcCombinedMetaData.ABI

// MimcCombinedBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MimcCombinedMetaData.Bin instead.
var MimcCombinedBin = MimcCombinedMetaData.Bin

// DeployMimcCombined deploys a new Ethereum contract, binding an instance of MimcCombined to it.
func DeployMimcCombined(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MimcCombined, error) {
	parsed, err := MimcCombinedMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MimcCombinedBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MimcCombined{MimcCombinedCaller: MimcCombinedCaller{contract: contract}, MimcCombinedTransactor: MimcCombinedTransactor{contract: contract}, MimcCombinedFilterer: MimcCombinedFilterer{contract: contract}}, nil
}

// MimcCombined is an auto generated Go binding around an Ethereum contract.
type MimcCombined struct {
	MimcCombinedCaller     // Read-only binding to the contract
	MimcCombinedTransactor // Write-only binding to the contract
	MimcCombinedFilterer   // Log filterer for contract events
}

// MimcCombinedCaller is an auto generated read-only Go binding around an Ethereum contract.
type MimcCombinedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MimcCombinedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MimcCombinedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MimcCombinedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MimcCombinedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MimcCombinedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MimcCombinedSession struct {
	Contract     *MimcCombined     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MimcCombinedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MimcCombinedCallerSession struct {
	Contract *MimcCombinedCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// MimcCombinedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MimcCombinedTransactorSession struct {
	Contract     *MimcCombinedTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// MimcCombinedRaw is an auto generated low-level Go binding around an Ethereum contract.
type MimcCombinedRaw struct {
	Contract *MimcCombined // Generic contract binding to access the raw methods on
}

// MimcCombinedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MimcCombinedCallerRaw struct {
	Contract *MimcCombinedCaller // Generic read-only contract binding to access the raw methods on
}

// MimcCombinedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MimcCombinedTransactorRaw struct {
	Contract *MimcCombinedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMimcCombined creates a new instance of MimcCombined, bound to a specific deployed contract.
func NewMimcCombined(address common.Address, backend bind.ContractBackend) (*MimcCombined, error) {
	contract, err := bindMimcCombined(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MimcCombined{MimcCombinedCaller: MimcCombinedCaller{contract: contract}, MimcCombinedTransactor: MimcCombinedTransactor{contract: contract}, MimcCombinedFilterer: MimcCombinedFilterer{contract: contract}}, nil
}

// NewMimcCombinedCaller creates a new read-only instance of MimcCombined, bound to a specific deployed contract.
func NewMimcCombinedCaller(address common.Address, caller bind.ContractCaller) (*MimcCombinedCaller, error) {
	contract, err := bindMimcCombined(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MimcCombinedCaller{contract: contract}, nil
}

// NewMimcCombinedTransactor creates a new write-only instance of MimcCombined, bound to a specific deployed contract.
func NewMimcCombinedTransactor(address common.Address, transactor bind.ContractTransactor) (*MimcCombinedTransactor, error) {
	contract, err := bindMimcCombined(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MimcCombinedTransactor{contract: contract}, nil
}

// NewMimcCombinedFilterer creates a new log filterer instance of MimcCombined, bound to a specific deployed contract.
func NewMimcCombinedFilterer(address common.Address, filterer bind.ContractFilterer) (*MimcCombinedFilterer, error) {
	contract, err := bindMimcCombined(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MimcCombinedFilterer{contract: contract}, nil
}

// bindMimcCombined binds a generic wrapper to an already deployed contract.
func bindMimcCombined(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MimcCombinedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MimcCombined *MimcCombinedRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MimcCombined.Contract.MimcCombinedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MimcCombined *MimcCombinedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MimcCombined.Contract.MimcCombinedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MimcCombined *MimcCombinedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MimcCombined.Contract.MimcCombinedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MimcCombined *MimcCombinedCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MimcCombined.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MimcCombined *MimcCombinedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MimcCombined.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MimcCombined *MimcCombinedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MimcCombined.Contract.contract.Transact(opts, method, params...)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(string)
func (_MimcCombined *MimcCombinedCaller) Nonces(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var out []interface{}
	err := _MimcCombined.contract.Call(opts, &out, "nonces", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(string)
func (_MimcCombined *MimcCombinedSession) Nonces(arg0 common.Address) (string, error) {
	return _MimcCombined.Contract.Nonces(&_MimcCombined.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(string)
func (_MimcCombined *MimcCombinedCallerSession) Nonces(arg0 common.Address) (string, error) {
	return _MimcCombined.Contract.Nonces(&_MimcCombined.CallOpts, arg0)
}

// Uint256ToString is a free data retrieval call binding the contract method 0xce7e51e3.
//
// Solidity: function uint256ToString(uint256 value) pure returns(string)
func (_MimcCombined *MimcCombinedCaller) Uint256ToString(opts *bind.CallOpts, value *big.Int) (string, error) {
	var out []interface{}
	err := _MimcCombined.contract.Call(opts, &out, "uint256ToString", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uint256ToString is a free data retrieval call binding the contract method 0xce7e51e3.
//
// Solidity: function uint256ToString(uint256 value) pure returns(string)
func (_MimcCombined *MimcCombinedSession) Uint256ToString(value *big.Int) (string, error) {
	return _MimcCombined.Contract.Uint256ToString(&_MimcCombined.CallOpts, value)
}

// Uint256ToString is a free data retrieval call binding the contract method 0xce7e51e3.
//
// Solidity: function uint256ToString(uint256 value) pure returns(string)
func (_MimcCombined *MimcCombinedCallerSession) Uint256ToString(value *big.Int) (string, error) {
	return _MimcCombined.Contract.Uint256ToString(&_MimcCombined.CallOpts, value)
}

// Verify is a paid mutator transaction binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) returns(bool success)
func (_MimcCombined *MimcCombinedTransactor) Verify(opts *bind.TransactOpts, proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _MimcCombined.contract.Transact(opts, "Verify", proof, public_inputs)
}

// Verify is a paid mutator transaction binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) returns(bool success)
func (_MimcCombined *MimcCombinedSession) Verify(proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _MimcCombined.Contract.Verify(&_MimcCombined.TransactOpts, proof, public_inputs)
}

// Verify is a paid mutator transaction binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) returns(bool success)
func (_MimcCombined *MimcCombinedTransactorSession) Verify(proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _MimcCombined.Contract.Verify(&_MimcCombined.TransactOpts, proof, public_inputs)
}

// SetNonce is a paid mutator transaction binding the contract method 0x9099df1b.
//
// Solidity: function setNonce() returns()
func (_MimcCombined *MimcCombinedTransactor) SetNonce(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MimcCombined.contract.Transact(opts, "setNonce")
}

// SetNonce is a paid mutator transaction binding the contract method 0x9099df1b.
//
// Solidity: function setNonce() returns()
func (_MimcCombined *MimcCombinedSession) SetNonce() (*types.Transaction, error) {
	return _MimcCombined.Contract.SetNonce(&_MimcCombined.TransactOpts)
}

// SetNonce is a paid mutator transaction binding the contract method 0x9099df1b.
//
// Solidity: function setNonce() returns()
func (_MimcCombined *MimcCombinedTransactorSession) SetNonce() (*types.Transaction, error) {
	return _MimcCombined.Contract.SetNonce(&_MimcCombined.TransactOpts)
}

// MimcCombinedProofVerifiedIterator is returned from FilterProofVerified and is used to iterate over the raw logs and unpacked data for ProofVerified events raised by the MimcCombined contract.
type MimcCombinedProofVerifiedIterator struct {
	Event *MimcCombinedProofVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MimcCombinedProofVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MimcCombinedProofVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MimcCombinedProofVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MimcCombinedProofVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MimcCombinedProofVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MimcCombinedProofVerified represents a ProofVerified event raised by the MimcCombined contract.
type MimcCombinedProofVerified struct {
	Identity common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterProofVerified is a free log retrieval operation binding the contract event 0x9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd.
//
// Solidity: event ProofVerified(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) FilterProofVerified(opts *bind.FilterOpts, identity []common.Address) (*MimcCombinedProofVerifiedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MimcCombined.contract.FilterLogs(opts, "ProofVerified", identityRule)
	if err != nil {
		return nil, err
	}
	return &MimcCombinedProofVerifiedIterator{contract: _MimcCombined.contract, event: "ProofVerified", logs: logs, sub: sub}, nil
}

// WatchProofVerified is a free log subscription operation binding the contract event 0x9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd.
//
// Solidity: event ProofVerified(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) WatchProofVerified(opts *bind.WatchOpts, sink chan<- *MimcCombinedProofVerified, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MimcCombined.contract.WatchLogs(opts, "ProofVerified", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MimcCombinedProofVerified)
				if err := _MimcCombined.contract.UnpackLog(event, "ProofVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofVerified is a log parse operation binding the contract event 0x9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd.
//
// Solidity: event ProofVerified(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) ParseProofVerified(log types.Log) (*MimcCombinedProofVerified, error) {
	event := new(MimcCombinedProofVerified)
	if err := _MimcCombined.contract.UnpackLog(event, "ProofVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MimcCombinedVerificationFailedIterator is returned from FilterVerificationFailed and is used to iterate over the raw logs and unpacked data for VerificationFailed events raised by the MimcCombined contract.
type MimcCombinedVerificationFailedIterator struct {
	Event *MimcCombinedVerificationFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MimcCombinedVerificationFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MimcCombinedVerificationFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MimcCombinedVerificationFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MimcCombinedVerificationFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MimcCombinedVerificationFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MimcCombinedVerificationFailed represents a VerificationFailed event raised by the MimcCombined contract.
type MimcCombinedVerificationFailed struct {
	Identity common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterVerificationFailed is a free log retrieval operation binding the contract event 0x4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf.
//
// Solidity: event VerificationFailed(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) FilterVerificationFailed(opts *bind.FilterOpts, identity []common.Address) (*MimcCombinedVerificationFailedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MimcCombined.contract.FilterLogs(opts, "VerificationFailed", identityRule)
	if err != nil {
		return nil, err
	}
	return &MimcCombinedVerificationFailedIterator{contract: _MimcCombined.contract, event: "VerificationFailed", logs: logs, sub: sub}, nil
}

// WatchVerificationFailed is a free log subscription operation binding the contract event 0x4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf.
//
// Solidity: event VerificationFailed(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) WatchVerificationFailed(opts *bind.WatchOpts, sink chan<- *MimcCombinedVerificationFailed, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MimcCombined.contract.WatchLogs(opts, "VerificationFailed", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MimcCombinedVerificationFailed)
				if err := _MimcCombined.contract.UnpackLog(event, "VerificationFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerificationFailed is a log parse operation binding the contract event 0x4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf.
//
// Solidity: event VerificationFailed(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) ParseVerificationFailed(log types.Log) (*MimcCombinedVerificationFailed, error) {
	event := new(MimcCombinedVerificationFailed)
	if err := _MimcCombined.contract.UnpackLog(event, "VerificationFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
